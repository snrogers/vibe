<task>
  <id>task-009</id>
  <description>Implement the FileReadTool to read file contents with optional line range and encoding.</description>
  <files>
    <file>/Users/sebastian/projects/vibe/lib/Services/ToolService/FileReadTool/FileReadTool.ts</file>
    <file>/Users/sebastian/projects/vibe/lib/Services/ToolService/index.ts</file>
  </files>
  <steps>
    <step>
      <number>1</number>
      <instruction>Create the FileReadTool.ts file with the tool definition and handler to read files based on input parameters.</instruction>
      <code><![CDATA[
import type { ChatCompletionMessageToolCall } from "openai/resources";
import type { ToolMessage } from "@/lib/Domain/ChatSession";
import { z } from "zod";
import type { Tool } from "../Types";

const FileReadArgsSchema = z.object({
  file_path: z.string().describe("Absolute path to the file"),
  encoding: z.string().optional().describe("File encoding, defaults to 'utf-8'"),
  offset: z.number().int().min(1).optional().describe("1-based line number to start reading from, defaults to 1"),
  limit: z.number().int().min(1).optional().describe("Maximum number of lines to read, defaults to reading to the end"),
});

const description = `
Read the contents of a file from the local file system. You can specify the file path, encoding, and optionally a range of lines to read. If no range is specified, the entire file is read.

<example>
{
  "file_path": "/path/to/file.txt",
  "encoding": "utf-8",
  "offset": 5,
  "limit": 10
}
</example>
This would read lines 5 to 14 from file.txt with utf-8 encoding.
`;

async function handleFileReadToolCall(toolCall: ChatCompletionMessageToolCall): Promise<ToolMessage> {
  const { function: { arguments: argsJson }, id: tool_call_id } = toolCall;
  const args = FileReadArgsSchema.parse(JSON.parse(argsJson));
  const { file_path, encoding, offset, limit } = args;

  const actualEncoding = encoding ?? "utf-8";
  const actualOffset = offset ?? 1;
  const actualLimit = limit ?? null;

  try {
    const buffer = await Bun.file(file_path).arrayBuffer();
    const decoder = new TextDecoder(actualEncoding, { fatal: true });
    const content = decoder.decode(buffer);

    const lineEnding = content.includes("\r\n") ? "\r\n" : "\n";
    const lines = content.split(/\r?\n/);
    const start = actualOffset - 1; // Convert to 0-based index
    const end = actualLimit ? start + actualLimit : lines.length;
    const selectedLines = lines.slice(start, end);
    const resultContent = selectedLines.join(lineEnding);

    return {
      role: "tool",
      tool_call_id,
      content: JSON.stringify({ content: resultContent, error: null }),
    };
  } catch (error) {
    let errorMessage = "Unknown error";
    if (error instanceof TypeError && error.message.includes("decode")) {
      errorMessage = "Decoding error";
    } else if (error instanceof Error && "code" in error) {
      if (error.code === "ENOENT") errorMessage = "File not found";
      else if (error.code === "EACCES") errorMessage = "Permission denied";
    }
    return {
      role: "tool",
      tool_call_id,
      content: JSON.stringify({ content: null, error: errorMessage }),
    };
  }
}

export const FileReadTool = {
  name: "file_read",
  description,
  argsSchema: FileReadArgsSchema,
  handler: handleFileReadToolCall,
} as const satisfies Tool;
      ]]></code>
    </step>
    <step>
      <number>2</number>
      <instruction>Update index.ts to include FileReadTool in ALL_COMPLETION_TOOLS array.</instruction>
      <code><![CDATA[
import { FileReadTool } from "./FileReadTool/FileReadTool";

// Add to existing ALL_COMPLETION_TOOLS array
export const ALL_COMPLETION_TOOLS = [
  // ...existing tools (e.g., BashTool, ProjectOverviewTool),
  FileReadTool,
];
      ]]></code>
    </step>
  </steps>
  <criteria>
    <criterion>The FileReadTool.ts file exists and implements the tool per the acceptance criteria.</criterion>
    <criterion>FileReadTool is included in ALL_COMPLETION_TOOLS in index.ts.</criterion>
    <criterion>Running `bun x tsc --noEmit` succeeds without errors.</criterion>
  </criteria>
</task>
